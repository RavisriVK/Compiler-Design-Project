//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Pass3<R,A> implements GJVisitor<R,A> {
   // public class EncodeData {
   //    public HashMap<String, HashMap<Integer, String>> allocation;
   //    public HashMap<String, HashMap<Integer, Integer>> spills;
   //    public HashMap<String, Integer> max_args_used;
   // }

   HashMap<String, HashMap<Integer, String>> allocation;
   HashMap<String, HashMap<Integer, Integer>> spills;
   HashMap<String, Integer> max_args_used;

   String procedure_name;
   Integer l1, l2, l3;
   HashMap<String, HashMap<String, String>> label_map;

   Boolean is_spilled=false;

   Boolean in_call=false;
   Boolean in_label=false;

   Boolean in_arg_list=false;
   ArrayList<R> tmps=new ArrayList<>();
   ArrayList<Boolean> spill_check=new ArrayList<>();

   //#region
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
         String label_name=(String)n.node.accept(this,argu);
         String unique_label=label_map.get(procedure_name).get(label_name);
         System.out.println(unique_label);
         return (R) label_name;
      } else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R) n.tokenImage; }
   //#endregion

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      EncodeData info=(EncodeData) argu;
      allocation=info.allocation;
      spills=info.spills;
      max_args_used=info.max_args_used;
      label_map=info.label_map;
      argu=null;

      //System.out.println(allocation);

      procedure_name=(String)n.f0.accept(this, argu);

      l1=0;
      l3=max_args_used.get(procedure_name);
      l2=Math.max(l1-4, 0) + spills.get(procedure_name).size() + (l3>=0 ? 10 : 0);
      l3=Math.max(l3, 0);

      System.out.println("MAIN [" + l1 + "][" + l2 + "][" + l3 + "]");

      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      System.out.println("END");
      System.out.println("//" + (spills.get(procedure_name).size()>0 ? "SPILLED" : "NOTSPILLED") + "\n");

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      procedure_name=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer number_of_args=Integer.parseInt((String)n.f2.accept(this, argu));
      n.f3.accept(this, argu);

      l1=number_of_args;
      l3=max_args_used.get(procedure_name);
      l2=Math.max(l1-4, 0) + spills.get(procedure_name).size() + (l3>=0 ? 18 : 8);
      l3=Math.max(l3, 0);

      System.out.println(procedure_name + " [" + l1 + "][" + l2 + "][" + l3 + "]");

      Integer start_position=Math.max(l1-4, 0) + spills.get(procedure_name).size();
      System.out.println("ASTORE SPILLEDARG " + (start_position + 0) + " s0");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 1) + " s1");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 2) + " s2");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 3) + " s3");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 4) + " s4");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 5) + " s5");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 6) + " s6");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 7) + " s7");

      for(Integer i=0; i<Math.min(4, l1); i++) {
         String reg;
         if(allocation.get(procedure_name).get(i)==null) {
            reg="v0";
         } else {
            reg=allocation.get(procedure_name).get(i);
         }
         System.out.println("MOVE " + reg + " a" + i);
         if(reg.equals("v0")) {
            Integer spilled_location=spills.get(procedure_name).get(i);
            System.out.println("ASTORE SPILLEDARG " + spilled_location + " v0");
         }
      }
      for(Integer i=4; i<l1; i++) {
         String reg;
         System.out.println("ALOAD v0 SPILLEDARG " + (i-4));
         if(allocation.get(procedure_name).get(i)==null) {
            Integer spilled_location=spills.get(procedure_name).get(i);
            System.out.println("ASTORE SPILLEDARG " + spilled_location + " v0");
         } else {
            reg=allocation.get(procedure_name).get(i);
            System.out.println("MOVE " + reg + " v0");
         }
      }

      n.f4.accept(this, argu);

      System.out.println("ALOAD s0 SPILLEDARG " + (start_position + 0));
      System.out.println("ALOAD s1 SPILLEDARG " + (start_position + 1));
      System.out.println("ALOAD s2 SPILLEDARG " + (start_position + 2));
      System.out.println("ALOAD s3 SPILLEDARG " + (start_position + 3));
      System.out.println("ALOAD s4 SPILLEDARG " + (start_position + 4));
      System.out.println("ALOAD s5 SPILLEDARG " + (start_position + 5));
      System.out.println("ALOAD s6 SPILLEDARG " + (start_position + 6));
      System.out.println("ALOAD s7 SPILLEDARG " + (start_position + 7));

      System.out.println("END");
      System.out.println("//" + (spills.get(procedure_name).size()>0 ? "SPILLED" : "NOTSPILLED") + "\n");

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R tmp=n.f1.accept(this, argu);
      String label_name=(String)n.f2.accept(this, argu);
      String unique_label=label_map.get(procedure_name).get(label_name);

      String reg;
      if(is_spilled) {
         System.out.println("ALOAD v0 SPILLEDARG " + ((Integer) tmp));
         reg="v0";
      } else {
         reg=(String) tmp;
      }

      System.out.println("CJUMP " + reg + " " + unique_label);

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label_name=(String)n.f1.accept(this, argu);

      // System.out.println(procedure_name + " " + label_name + " " + label_map);
      String unique_label=label_map.get(procedure_name).get(label_name);
      System.out.println("JUMP " + unique_label);

      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      R tmp1=n.f1.accept(this, argu);
      String reg1;
      if(is_spilled) {
         System.out.println("ALOAD v0 SPILLEDARG " + ((Integer) tmp1));
         reg1="v0";
      } else {
         reg1=(String) tmp1;
      }

      Integer disp=Integer.parseInt((String)n.f2.accept(this, argu));

      R tmp2=n.f3.accept(this, argu);
      String reg2;
      if(is_spilled) {
         System.out.println("ALOAD v1 SPILLEDARG " + ((Integer) tmp2));
         reg2="v1";
      } else {
         reg2=(String) tmp2;
      }

      System.out.println("HSTORE " + reg1 + " " + disp + " " + reg2);

      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R tmp1=n.f1.accept(this, argu);
      String reg1;
      if(is_spilled) {
         reg1="v0";
      } else {
         reg1=(String)tmp1;
      }

      R tmp2=n.f2.accept(this, argu);
      String reg2;
      if(is_spilled) {
         System.out.println("ALOAD v1 SPILLEDARG " + ((Integer) tmp2));
         reg2="v1";
      } else {
         reg2=(String) tmp2;
      }

      Integer disp=Integer.parseInt((String)n.f3.accept(this, argu));

      System.out.println("HLOAD " + reg1 + " " + reg2 + " " + disp);

      if(reg1.equals("v0")) {
         System.out.println("ASTORE SPILLEDARG " + ((Integer)tmp1) + " " + reg1);
      }

      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      R tmp=n.f1.accept(this, argu);
      String reg;
      Boolean is_dest_spilled=is_spilled;
   
      n.f2.accept(this, argu);

      if(is_dest_spilled) {
         reg="v0";
      } else {
         reg=(String)tmp;
      }

      System.out.println("MOVE " + reg + " v1");

      if(reg.equals("v0")) {
         System.out.println("ASTORE SPILLEDARG " + ((Integer)tmp) + " " + reg);
      }

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      System.out.println("PRINT v1");

      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      System.out.println();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R tmp=n.f3.accept(this, argu);

      System.out.println("MOVE v0 v1");

      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;

      Integer start_position=Math.max(l1-4, 0) + spills.get(procedure_name).size() + (procedure_name.equals("MAIN") ? 0 : 8);
      System.out.println("ASTORE SPILLEDARG " + (start_position + 0) + " t0");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 1) + " t1");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 2) + " t2");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 3) + " t3");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 4) + " t4");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 5) + " t5");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 6) + " t6");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 7) + " t7");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 8) + " t8");
      System.out.println("ASTORE SPILLEDARG " + (start_position + 9) + " t9");

      n.f0.accept(this, argu);

      in_call=true;
      R tmp=n.f1.accept(this, argu);
      in_call=false;

      n.f2.accept(this, argu);

      in_arg_list=true;
      tmps.clear();
      spill_check.clear();
      n.f3.accept(this, argu);
      in_arg_list=false;

      for(int i=0; i<Math.min(4, tmps.size()); i++) {
         String reg1;
         R tmp1=tmps.get(i);
         if(spill_check.get(i)) {
            System.out.println("ALOAD v0 SPILLEDARG " + ((Integer) tmp1));
            reg1="v0";
         } else {
            reg1=(String)tmp1;
         }
         System.out.println("MOVE a" + i + " " + reg1);
      }
      for(int i=4; i<tmps.size(); i++) {
         String reg1;
         R tmp1=tmps.get(i);
         if(spill_check.get(i)) {
            System.out.println("ALOAD v0 SPILLEDARG " + ((Integer) tmp1));
            reg1="v0";
         } else {
            reg1=(String)tmp1;
         }
         System.out.println("PASSARG " + (i-3) + " " + reg1);
      }

      System.out.println("CALL v1");

      System.out.println("ALOAD t0 SPILLEDARG " + (start_position + 0));
      System.out.println("ALOAD t1 SPILLEDARG " + (start_position + 1));
      System.out.println("ALOAD t2 SPILLEDARG " + (start_position + 2));
      System.out.println("ALOAD t3 SPILLEDARG " + (start_position + 3));
      System.out.println("ALOAD t4 SPILLEDARG " + (start_position + 4));
      System.out.println("ALOAD t5 SPILLEDARG " + (start_position + 5));
      System.out.println("ALOAD t6 SPILLEDARG " + (start_position + 6));
      System.out.println("ALOAD t7 SPILLEDARG " + (start_position + 7));
      System.out.println("ALOAD t8 SPILLEDARG " + (start_position + 8));
      System.out.println("ALOAD t9 SPILLEDARG " + (start_position + 9));

      System.out.println("MOVE v1 v0");

      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);

      R tmp=n.f1.accept(this, argu);

      System.out.println("MOVE v1 HALLOCATE v1");
      _ret=(R)"v1";

      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String operator=(String)n.f0.accept(this, argu);
      R tmp1=n.f1.accept(this, argu);
      String reg1;
      Boolean is_op1_spilled=is_spilled;

      R tmp2=n.f2.accept(this, argu);

      if(is_op1_spilled) {
         System.out.println("ALOAD v0 SPILLEDARG " + ((Integer) tmp1));
         reg1="v0";
      } else {
         reg1=(String)tmp1;
      }

      System.out.println("MOVE v1 " + operator + " " + reg1 + " v1");
      _ret=(R) "v1";

      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      is_spilled=false;
      R tmp=n.f0.accept(this, argu);
      String reg;
      if(is_spilled) {
         System.out.println("ALOAD v1 SPILLEDARG " + ((Integer)tmp));
         reg="v1";
      } else {
         reg=(String)tmp;
         System.out.println("MOVE v1 " + reg);
      }
      _ret=(R) "v1";

      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp_number=Integer.parseInt((String)n.f1.accept(this, argu));

      is_spilled=allocation.get(procedure_name).get(temp_number)==null;
      if(is_spilled) {
         _ret=(R) spills.get(procedure_name).get(temp_number);
      } else {
         _ret=(R) allocation.get(procedure_name).get(temp_number);
      }

      if(in_arg_list) {
         tmps.add(_ret);
         spill_check.add(is_spilled);
      }

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      in_label=true;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

}
